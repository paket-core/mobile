          // Automatically generated by xdrgen 
          // DO NOT EDIT or your changes may be overwritten

          namespace Stellar.Generated
{


// === xdr source ============================================================
//  struct AllowTrustOp
//  {
//      AccountID trustor;
//      union switch (AssetType type)
//      {
//      // ASSET_TYPE_NATIVE is not allowed
//      case ASSET_TYPE_CREDIT_ALPHANUM4:
//          opaque assetCode4[4];
//  
//      case ASSET_TYPE_CREDIT_ALPHANUM12:
//          opaque assetCode12[12];
//  
//          // add other asset types here in the future
//      }
//      asset;
//  
//      bool authorize;
//  };
//  ===========================================================================
public class AllowTrustOp {
  public AllowTrustOp () {}
  public AccountID Trustor { get; set; }
  public AllowTrustOpAsset Asset { get; set; }
  public bool Authorize { get; set; }
  public static void Encode(IByteWriter stream, AllowTrustOp encodedAllowTrustOp) {
    AccountID.Encode(stream, encodedAllowTrustOp.Trustor);
    AllowTrustOpAsset.Encode(stream, encodedAllowTrustOp.Asset);
    XdrEncoding.WriteBool(stream, encodedAllowTrustOp.Authorize);
  }
  public static AllowTrustOp Decode(IByteReader stream) {
    AllowTrustOp decodedAllowTrustOp = new AllowTrustOp();
    decodedAllowTrustOp.Trustor = AccountID.Decode(stream);
    decodedAllowTrustOp.Asset = AllowTrustOpAsset.Decode(stream);
    decodedAllowTrustOp.Authorize = XdrEncoding.ReadBool(stream);
    return decodedAllowTrustOp;
  }

  public class AllowTrustOpAsset {
    public AllowTrustOpAsset () {}
    public AssetType Discriminant { get; set; } = new AssetType();
    public byte[] AssetCode4 { get; set; } = default(byte[]);
    public byte[] AssetCode12 { get; set; } = default(byte[]);
    public static void Encode(IByteWriter stream, AllowTrustOpAsset encodedAllowTrustOpAsset) {
    XdrEncoding.EncodeInt32((int)encodedAllowTrustOpAsset.Discriminant.InnerValue, stream);
    switch (encodedAllowTrustOpAsset.Discriminant.InnerValue) {
    case AssetType.AssetTypeEnum.ASSET_TYPE_CREDIT_ALPHANUM4:
    int assetCode4size = encodedAllowTrustOpAsset.AssetCode4.Length;
    XdrEncoding.WriteFixOpaque(stream, (uint)assetCode4size, encodedAllowTrustOpAsset.AssetCode4);
    break;
    case AssetType.AssetTypeEnum.ASSET_TYPE_CREDIT_ALPHANUM12:
    int assetCode12size = encodedAllowTrustOpAsset.AssetCode12.Length;
    XdrEncoding.WriteFixOpaque(stream, (uint)assetCode12size, encodedAllowTrustOpAsset.AssetCode12);
    break;
    }
    }
    public static AllowTrustOpAsset Decode(IByteReader stream) {
      AllowTrustOpAsset decodedAllowTrustOpAsset = new AllowTrustOpAsset();
    decodedAllowTrustOpAsset.Discriminant = AssetType.Decode(stream);
    switch (decodedAllowTrustOpAsset.Discriminant.InnerValue) {
    case AssetType.AssetTypeEnum.ASSET_TYPE_CREDIT_ALPHANUM4:
    int assetCode4size = 4;
    decodedAllowTrustOpAsset.AssetCode4 = XdrEncoding.ReadFixOpaque(stream, (uint)assetCode4size);
    break;
    case AssetType.AssetTypeEnum.ASSET_TYPE_CREDIT_ALPHANUM12:
    int assetCode12size = 12;
    decodedAllowTrustOpAsset.AssetCode12 = XdrEncoding.ReadFixOpaque(stream, (uint)assetCode12size);
    break;
    }
      return decodedAllowTrustOpAsset;
    }

  }
}
}
